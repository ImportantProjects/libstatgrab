CPU Statistics
==============

$Id$

Data Structures
---------------

There are two structures returned by the CPU statistics functions.
They look like this:

typedef struct{
        long long user;
        long long kernel;
        long long idle;
        long long iowait;
        long long swap;
        long long nice;
        long long total;
        time_t systime;
}cpu_states_t;

typedef struct{
        float user;
        float kernel;
        float idle;
        float iowait;
        float swap;
        float nice;
        time_t time_taken;
}cpu_percent_t;

user, kernel, idle, iowait, swap, and nice are different CPU states.
systime and time_taken are the time in seconds since the last call
of the function.

Functions
---------

cpu_states_t *get_cpu_totals();
cpu_states_t *get_cpu_diff();
cpu_percent_t *cpu_percent_usage();

get_cpu_totals() and get_cpu_diff() both return static pointers of
type cpu_states_t. get_cpu_totals() returns the total amount of
"ticks" the operating system has spent in each of the different
states. get_cpu_diff() returns the difference in "ticks" for each
of the states since last time get_cpu_diff() or get_cpu_totals()
was called. If it has never been called, it will return the result
of get_cpu_totals()

The value stored (the "ticks") will vary between operating systems.
For example Solaris has a total of 100 per second, while Linux has
substantially more.  Also, different operating systems store different
information - you won't find nice cpu on Solaris for example.

Because of this,  you will ideally always want to work on a scale
against the total, or in percentages.

cpu_percent_usage() returns a pointer to a static cpu_percent_t.
The function calls get_cpu_diff() and changes the values into
percentages. If it has never been called before (and nor has
get_cpu_totals() or get_cpu_diff() ), the returned percentages will
be the systems total ever since its uptime. (Unless the counters
have cycled)

Example
-------

A basic example can be found in examples/cpu_usage.c
