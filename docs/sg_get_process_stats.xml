<?xml version="1.0"?>

<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<refentry id="sg_get_process_stats">

  <refentryinfo>
    <date>$Date$</date>
    <releaseinfo>$Id$</releaseinfo>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sg_get_process_stats</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>i-scream</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>sg_get_process_stats</refname>
    <refname>sg_get_process_count</refname>
    <refname>sg_process_compare_name</refname>
    <refname>sg_process_compare_pid</refname>
    <refname>sg_process_compare_uid</refname>
    <refname>sg_process_compare_gid</refname>
    <refname>sg_process_compare_size</refname>
    <refname>sg_process_compare_res</refname>
    <refname>sg_process_compare_cpu</refname>
    <refname>sg_process_compare_time</refname>
    <refpurpose>get process statistics</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>#include &lt;statgrab.h&gt;</funcsynopsisinfo>
      <funcprototype>
        <funcdef>sg_process_stats *<function>sg_get_process_stats</function></funcdef>
        <paramdef>int *<parameter>entries</parameter></paramdef>
      </funcprototype>
      <funcprototype>
        <funcdef>sg_process_count *<function>sg_get_process_count</function></funcdef>
        <void/>
      </funcprototype>

      <funcprototype>
      	<funcdef>int <function>sg_process_compare_name</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_pid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_uid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_gid</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_size</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_res</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_cpu</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>
      <funcprototype>
      	<funcdef>int <function>sg_process_compare_time</function></funcdef>
	<paramdef>const void *<parameter>va</parameter></paramdef>
	<paramdef>const void *<parameter>vb</parameter></paramdef>
      </funcprototype>

    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
      The <function>sg_get_process_stats</function> takes a pointer to
      an int, <parameter>entries</parameter>, which is filled with the
      number of processes the snapshot contains. The return value is a
      pointer to the first member of an array of
      <structname>sg_process_stats</structname> structures; the number
      of entries in the array is returned in
      <parameter>entries</parameter>.
    </para>
    <para>
      <function>sg_get_process_count</function> returns a pointer to a
      static buffer of type <structname>sg_process_count</structname>.
    </para>
    <para>
      These two functions provide information on the process running
      on the system. In the first case lots of detail is provided, and
      in the second case a summary of the states of the current processes.
    </para>
    <para>
      <simplelist type="vert">
        <member><function>sg_process_compare_name</function></member>
        <member><function>sg_process_compare_pid</function></member>
        <member><function>sg_process_compare_uid</function></member>
        <member><function>sg_process_compare_gid</function></member>
        <member><function>sg_process_compare_size</function></member>
        <member><function>sg_process_compare_res</function></member>
        <member><function>sg_process_compare_cpu</function></member>
        <member><function>sg_process_compare_time</function></member>
      </simplelist>
    </para>
    <para>
      These functions compare two sg_process_stats entries, and return an 
      int to represent which one is greater. The main use of these functions
      is to be passed to qsort to sort the sg_process_stats by the given type.
    </para>
    <para> 
      For example: 
    </para>
    <para>
        <function>qsort</function>(<structname>sg_process_stats</structname> ps, int ps_size, sizeof *ps, sg_process_compare_pid);
    </para>

  </refsect1>

  <refsect1>
    <title>Return Values</title>

    <para>
      The structure returned by sg_get_process_stats is of type
      <structname>sg_process_stats</structname>.
    </para>

    <programlisting>
typedef struct {
        char *process_name;
        char *proctitle;

        pid_t pid;
        pid_t parent; /* Parent pid */
        pid_t pgid;   /* process id of process group leader */

        uid_t uid;
        uid_t euid;
        gid_t gid;
        gid_t egid;

        unsigned long long proc_size; /* in bytes */
        unsigned long long proc_resident; /* in bytes */
        time_t time_spent; /* time running in seconds */
        double cpu_percent;
        int nice;
        sg_process_state state;
} sg_process_stats;
    </programlisting>

    <programlisting>
typedef enum {
        SG_PROCESS_STATE_RUNNING,
        SG_PROCESS_STATE_SLEEPING,
        SG_PROCESS_STATE_STOPPED,
        SG_PROCESS_STATE_ZOMBIE,
        SG_PROCESS_STATE_UNKNOWN
} sg_process_state;
    </programlisting>

    <variablelist>
      <varlistentry>
        <term><structfield>process_name</structfield></term>
        <listitem>
          <para>
            The name of the command that was run.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proctitle</structfield></term>
        <listitem>
          <para>
            The command line (the "title") of the process. Take
            note - this can be modified by the process, so isn't
            guaranteed to be the original command line.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>pid</structfield></term>
        <listitem>
          <para>
            The process ID.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>parent</structfield></term>
        <listitem>
          <para>
            The parent process ID.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>pgid</structfield></term>
        <listitem>
          <para>
            The process ID of the process group leader.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>uid</structfield></term>
        <listitem>
          <para>
            The UID the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>euid</structfield></term>
        <listitem>
          <para>
            The effective UID the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>gid</structfield></term>
        <listitem>
          <para>
            The GID the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>egid</structfield></term>
        <listitem>
          <para>
            The effective GID the process is running as.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proc_size</structfield></term>
        <listitem>
          <para>
            The size of the process in bytes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>proc_resident</structfield></term>
        <listitem>
          <para>
            The size of the process that's resident in memory.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>time_spent</structfield></term>
        <listitem>
          <para>
            The number of seconds the process has been running.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>cpu_percent</structfield></term>
        <listitem>
          <para>
            The current percentage of CPU the process is using.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>nice</structfield></term>
        <listitem>
          <para>
            The nice value of the process.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>state</structfield></term>
        <listitem>
          <para>
            The current state of the process. See sg_process_state
            for permitted values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      The structure returned by sg_get_process_count is of type
      <structname>sg_process_count</structname>.
    </para>

    <programlisting>
typedef struct{
        int total;
        int running;
        int sleeping;
        int stopped;
        int zombie;
}sg_process_count;
    </programlisting>

    <variablelist>
      <varlistentry>
        <term><structfield>total</structfield></term>
        <listitem>
          <para>
            The total number of processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>running</structfield></term>
        <listitem>
          <para>
            The number of running processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>sleeping</structfield></term>
        <listitem>
          <para>
            The number of sleeping processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>stopped</structfield></term>
        <listitem>
          <para>
            The number of stopped processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><structfield>zombie</structfield></term>
        <listitem>
          <para>
            The number of zombie processes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>See Also</title>

    <simplelist type="inline">
      <member>
        <citerefentry>
          <refentrytitle>statgrab</refentrytitle>
          <manvolnum>3</manvolnum>
        </citerefentry>
      </member>
    </simplelist>
  </refsect1>

  <refsect1>
    <title>Website</title>

    <simplelist type="vert">
      <member>
        <ulink url="http://www.i-scream.org/libstatgrab/">
          http://www.i-scream.org/libstatgrab/
        </ulink>
      </member>
    </simplelist>
  </refsect1>

</refentry>
